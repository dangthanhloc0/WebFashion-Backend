// <auto-generated />
using System;
using BACKENDEMO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BACKENDEMO.Migrations
{
    [DbContext(typeof(AppplicationDBContext))]
    partial class AppplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BACKENDEMO.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailDiscount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("numberofpercentdiscount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.DiscountDetail", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("discountDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("operationEvent")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.ImageProduct", b =>
                {
                    b.Property<int>("ImageProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageProductId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageProductId");

                    b.ToTable("ImageProducts");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MessageDetails", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("messageOfCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("productId", "messageOfCustomerId");

                    b.HasIndex("messageOfCustomerId");

                    b.ToTable("messageDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MessageOfCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageOfCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("appUserId")
                        .HasColumnType("int");

                    b.Property<string>("appUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("appUserId1");

                    b.ToTable("messageOfCustomers");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MethodOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("methodOfPayments");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.NotificationDetails", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("notificationId")
                        .HasColumnType("int");

                    b.HasKey("productId", "notificationId");

                    b.HasIndex("notificationId");

                    b.ToTable("notificationDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("methodOfPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("stateOrderId")
                        .HasColumnType("int");

                    b.Property<int>("stateTransportId")
                        .HasColumnType("int");

                    b.Property<int>("stateTransports")
                        .HasColumnType("int");

                    b.Property<long>("totalPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("methodOfPaymentId");

                    b.HasIndex("stateOrderId");

                    b.HasIndex("stateTransportId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.OrderDetail", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("productId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("quantityMaterial")
                        .HasColumnType("int");

                    b.Property<int>("quantitySellSucesss")
                        .HasColumnType("int");

                    b.Property<long>("quantityStock")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.StateOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stateOrders");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.StateTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("stateTransports");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.UserStock", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("AppUserId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("UserStocks");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.listImage", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("imageId")
                        .HasColumnType("int");

                    b.HasKey("productId", "imageId");

                    b.HasIndex("imageId");

                    b.ToTable("listImages");
                });

            modelBuilder.Entity("BACKENDEMO.Models.Comments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("IdStock")
                        .HasColumnType("int");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StockId");

                    b.ToTable("Commentss");
                });

            modelBuilder.Entity("BACKENDEMO.Models.Stocks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("lastdiv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("maketcap")
                        .HasColumnType("bigint");

                    b.Property<decimal>("purchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stockss");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "64e39a90-45a7-4e83-9b5b-6c0edb950000",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7b8a503-dc1a-40c8-bbe1-fe73f7bb645d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BACKENDEMO.Entity.DiscountDetail", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", "appUser")
                        .WithMany("DiscountDetails")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.Discount", "discount")
                        .WithMany("DiscountDetails")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");

                    b.Navigation("discount");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Event", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.Discount", "discounts")
                        .WithMany("events")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("discounts");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MessageDetails", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.MessageOfCustomer", "messageOfCustomer")
                        .WithMany("messageDetails")
                        .HasForeignKey("messageOfCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.Product", "product")
                        .WithMany("messageDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("messageOfCustomer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MessageOfCustomer", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", "appUser")
                        .WithMany("messageOfCustomers")
                        .HasForeignKey("appUserId1");

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.NotificationDetails", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.Notification", "notification")
                        .WithMany("notificationDetails")
                        .HasForeignKey("notificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.Product", "product")
                        .WithMany("notificationDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("notification");

                    b.Navigation("product");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Order", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", "appUser")
                        .WithMany("orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.MethodOfPayment", "methodOfPayment")
                        .WithMany("order")
                        .HasForeignKey("methodOfPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.StateOrder", "stateOrder")
                        .WithMany("orders")
                        .HasForeignKey("stateOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.StateTransport", "stateTransport")
                        .WithMany("orders")
                        .HasForeignKey("stateTransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");

                    b.Navigation("methodOfPayment");

                    b.Navigation("stateOrder");

                    b.Navigation("stateTransport");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.OrderDetail", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.Order", "order")
                        .WithMany("orderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.Product", "product")
                        .WithMany("orderDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.UserStock", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", "appUser")
                        .WithMany("userStocks")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Models.Stocks", "Stocks")
                        .WithMany("userStocks")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stocks");

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.listImage", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.ImageProduct", "ImageProducts")
                        .WithMany("ListImages")
                        .HasForeignKey("imageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.Product", "products")
                        .WithMany("ListImages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageProducts");

                    b.Navigation("products");
                });

            modelBuilder.Entity("BACKENDEMO.Models.Comments", b =>
                {
                    b.HasOne("BACKENDEMO.Models.Stocks", "Stock")
                        .WithMany("comments")
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACKENDEMO.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BACKENDEMO.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BACKENDEMO.Entity.AppUser", b =>
                {
                    b.Navigation("DiscountDetails");

                    b.Navigation("messageOfCustomers");

                    b.Navigation("orders");

                    b.Navigation("userStocks");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Discount", b =>
                {
                    b.Navigation("DiscountDetails");

                    b.Navigation("events");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.ImageProduct", b =>
                {
                    b.Navigation("ListImages");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MessageOfCustomer", b =>
                {
                    b.Navigation("messageDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.MethodOfPayment", b =>
                {
                    b.Navigation("order");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Notification", b =>
                {
                    b.Navigation("notificationDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Order", b =>
                {
                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.Product", b =>
                {
                    b.Navigation("ListImages");

                    b.Navigation("messageDetails");

                    b.Navigation("notificationDetails");

                    b.Navigation("orderDetails");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.StateOrder", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("BACKENDEMO.Entity.StateTransport", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("BACKENDEMO.Models.Stocks", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("userStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
